; OM File Header - Saved 2022/06/27 21:27:03
; (6.15 :patc (om-make-point 43 220) (om-make-point 50 50) (om-make-point 500 360) "" 183 0 nil "2019/05/16 16:16:04")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"merge_cseqlist.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "merge_cseqlist" (quote ((let ((box (om-load-boxcall (quote lispfun) "CDDR" (quote cddr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 433 273) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 326 287) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "merge_cseqlist" (quote ("elements" "fabiana" "merge_cseqlist")) (quote ((om-load-inputfun (quote input-funbox) "" "chord-seq-list" nil))) (om-make-point 316 372) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 165 556) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 110 134) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 31 135) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MERGER" (quote merger) (quote ((om-load-inputfun (quote input-funbox) "a music sequence" "SELF1" nil) (om-load-inputfun (quote input-funbox) "a music sequence" "SELF2" nil))) (om-make-point 74 204) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 153 413) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 421 120) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "A" 0) (om-load-inputfun (quote input-funbox) "a number" "B" 0))) (om-make-point 389 172) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 371 68) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "chord-seq-list" 0 (om-make-point 115 24) "" "chord-seq-list" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((11 0 0 0 nil 0) (6 0 1 0 nil 0) (0 0 1 1 nil 0) (1 0 2 0 nil 0) (7 0 3 0 nil 0) (11 0 4 0 nil 0) (11 0 5 0 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0) (9 0 7 0 nil 0) (6 0 7 1 nil 0) (2 0 7 2 nil 0) (10 0 9 0 nil 0) (8 0 9 1 nil 0) (11 0 10 0 nil 0))) nil 6.15))
