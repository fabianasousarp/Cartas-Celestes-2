; OM File Header - Saved 2023/06/29 22:57:57
; (6.15 :patc (om-make-point 118 210) (om-make-point -267 97) (om-make-point 1534 633) "" 183 0 "2022/07/19 10:51:56" "2023/06/29 22:57:57")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"C:../abstractions/posn-value.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "bloco3_grand_nuv_aatr 2" (quote ((let ((box (om-load-boxcall (quote bastype) "list 25" (quote list) (quote nil) (om-make-point 683 292) (om-make-point 154 28) (list 68 69 70 78 83 84 85 86) "(68 69 70 78 83 84 85 86)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 24" (quote list) (quote nil) (om-make-point 724 536) (om-make-point 170 28) (list 64 65 69 72 79 85 90 94 95) "(64 65 69 72 79 85 90 94 95)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 23" (quote list) (quote nil) (om-make-point 886 20) (om-make-point 122 28) (list 77 82 83 86 87 88) "(77 82 83 86 87 88)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 17" (quote list) (quote nil) (om-make-point 681 408) (om-make-point 122 28) (list 68 73 76 81 86 90) "(68 73 76 81 86 90)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 22" (quote list) (quote nil) (om-make-point 719 28) (om-make-point 122 28) (list 70 75 76 79 80 81) "(70 75 76 79 80 81)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 18" (quote list) (quote nil) (om-make-point 585 23) (om-make-point 122 28) (list 69 74 75 78 79 80) "(69 74 75 78 79 80)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 33" (quote list) (quote nil) (om-make-point 937 80) (om-make-point 138 28) (list 68 69 70 75 79 80 86) "(68 69 70 75 79 80 86)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 32" (quote list) (quote nil) (om-make-point 770 81) (om-make-point 138 28) (list 74 75 76 81 85 86 92) "(74 75 76 81 85 86 92)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 31" (quote list) (quote nil) (om-make-point 1102 455) (om-make-point 170 28) (list 64 65 69 72 78 85 90 94 95) "(64 65 69 72 78 85 90 94 95)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 30" (quote list) (quote nil) (om-make-point 892 455) (om-make-point 170 28) (list 58 59 63 66 73 79 84 88 89) "(58 59 63 66 73 79 84 88 89)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 29" (quote list) (quote nil) (om-make-point 976 351) (om-make-point 202 28) (list 68 71 73 74 76 81 82 84 86 89 92) "(68 71 73 74 76 81 82 84 86 89 92)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 28" (quote list) (quote nil) (om-make-point 1045 244) (om-make-point 202 28) (list 65 68 70 71 73 78 79 81 83 86 89) "(65 68 70 71 73 78 79 81 83 86 89)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 27" (quote list) (quote nil) (om-make-point 702 478) (om-make-point 170 28) (list 59 60 64 67 74 80 85 89 90) "(59 60 64 67 74 80 85 89 90)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "ac 9 1 st") "" (om-make-point 903 262) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 26" (quote list) (quote nil) (om-make-point 792 250) (om-make-point 202 28) (list 61 64 66 67 69 74 75 77 79 82 85) "(61 64 66 67 69 74 75 77 79 82 85)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "acorde 9") "" (om-make-point 668 209) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "acorde 9 - seis semitons acima") "" (om-make-point 1086 189) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 21" (quote list) (quote nil) (om-make-point 1041 144) (om-make-point 202 28) (list 66 69 71 72 74 79 80 82 84 87 90) "(66 69 71 72 74 79 80 82 84 87 90)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "acorde 9 - dois semitons acima") "" (om-make-point 886 185) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 20" (quote list) (quote nil) (om-make-point 813 143) (om-make-point 202 28) (list 62 65 67 68 70 75 76 78 80 83 86) "(62 65 67 68 70 75 76 78 80 83 86)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 19" (quote list) (quote nil) (om-make-point 608 83) (om-make-point 138 28) (list 67 68 69 74 78 79 85) "(67 68 69 74 78 79 85)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 16" (quote list) (quote nil) (om-make-point 510 530) (om-make-point 170 28) (list 55 56 60 63 70 76 81 85 86) "(55 56 60 63 70 76 81 85 86)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 15" (quote list) (quote nil) (om-make-point 523 473) (om-make-point 170 28) (list 57 58 62 65 72 78 83 87 88) "(57 58 62 65 72 78 83 87 88)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 14" (quote list) (quote nil) (om-make-point 550 413) (om-make-point 122 28) (list 64 69 72 77 82 86) "(64 69 72 77 82 86)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 13" (quote list) (quote nil) (om-make-point 536 371) (om-make-point 154 28) (list 57 59 60 68 69 77 78 80) "(57 59 60 68 69 77 78 80)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 12" (quote list) (quote nil) (om-make-point 525 333) (om-make-point 170 28) (list 44 49 50 55 68 73 76 78 81) "(44 49 50 55 68 73 76 78 81)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 511 289) (om-make-point 154 28) (list 62 63 64 72 77 78 79 80) "(62 63 64 72 77 78 79 80)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 489 250) (om-make-point 154 28) (list 73 74 76 77 79 84 88 95) "(73 74 76 77 79 84 88 95)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 469 212) (om-make-point 202 28) (list 60 63 65 66 68 73 74 76 78 81 84) "(60 63 65 66 68 73 74 76 78 81 84)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 478 173) (om-make-point 138 28) (list 60 68 69 70 71 72 79) "(60 68 69 70 71 72 79)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 465 145) (om-make-point 122 28) (list 63 66 73 74 79 88) "(63 66 73 74 79 88)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 457 112) (om-make-point 170 28) (list 47 48 57 63 64 65 67 68 72) "(47 48 57 63 64 65 67 68 72)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 464 86) (om-make-point 138 28) (list 65 66 67 72 76 77 83) "(65 66 67 72 76 77 83)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 499 53) (om-make-point 90 28) (list 62 69 75 82) "(62 69 75 82)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 461 29) (om-make-point 122 28) (list 67 72 73 76 77 78) "(67 72 73 76 77 78)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 427 3) (om-make-point 106 28) (list 62 63 73 74 87) "(62 63 73 74 87)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 113 54) (quote "fundamental da série harmônica") "" (om-make-point 236 577) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "notas do acorde-alfabeto") "" (om-make-point 273 189) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 224 64) (quote "a similaridade é definida pela razão entre o número de notas coincidentes com a série harmônica e o número de notas do acorde") "" (om-make-point 255 394) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 225 78) (quote "lista as fundamentais das séries harmônicas (midicents) mais próximas dos acordes, assim como o grau de similaridade (0 = sem similaridade // 1 = máxima similaridade)") "" (om-make-point 250 301) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 123 558) (om-make-point 101 106) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 2600 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1536 741) (om-make-point -8 -8) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 138 475) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 137 377) (om-make-point 26 40) 0 "0$" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 173 413) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "get_harmSer" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "acorde (mc list)" nil))) (om-make-point 158 289) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 664 343) (om-make-point 26 28) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number of decimals" "DECIMALS" 0))) (om-make-point 630 373) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 759 483) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 781 424) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POSN-MATCH 2" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "a list positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 719 356) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 632 317) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH 2" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 626 198) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POSN-MATCH" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "a list positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 803 356) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 854 208) (om-make-point 28 28) (quote >) ">" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "posn-value" (quote ("elements" "abstractions" "posn-value")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 816 238) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-INTERSECT" (quote x-intersect) (quote ((om-load-inputfun (quote input-funbox) "a list" "L1?" nil) (om-load-inputfun (quote input-funbox) "a list" "L2?" nil))) (om-make-point 419 455) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 388 395) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 427 517) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 198 276) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 197 338) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EXPAND-LST 2" (quote expand-lst) (quote ((om-load-inputfun (quote input-funbox) "a list to expand" "LIST" (list (quote 3*) (list 2 4) (quote |0_8|))))) (om-make-point 109 267) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 107 225) (om-make-point 58 30) (list (quote |1_30|)) "(1_30)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 190 383) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 185 446) (om-make-point 71 139) (let ((thechord (make-instance (quote chord) :lmidic (quote (2300 3500 4202 4700 5086 5402 5668 5900 6104 6286 6452 6602 6740 6868 6988 7100 7204 7304 7398 7486 7570 7652 7728 7802 7872 7940 8006 8068 8130 8188)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 81/100 nil 1000 1 (om-make-point 1255 281) (om-make-point 251 -644) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPROX-M" (quote approx-m) (quote ((om-load-inputfun (quote input-funbox) "pitch list (midicents)" "SELF" 6000) (om-load-inputfun (quote input-funbox) "tone division" "APPROX" 2))) (om-make-point 376 323) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 124 34) (quote "oitava de La0 a G#0") "" (om-make-point 245 164) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 222 169) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EXPAND-LST" (quote expand-lst) (quote ((om-load-inputfun (quote input-funbox) "a list to expand" "LIST" (list (quote 3*) (list 2 4) (quote |0_8|))))) (om-make-point 188 103) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 186 61) (om-make-point 60 28) (list (quote |21_32|)) "(21_32)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 219 212) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "acorde (mc list)" 0 (om-make-point 494 83) "" "acorde (mc list)" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 536 376) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 769 561) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 507 469) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((5 0 1 0 nil 0) (0 0 1 1 nil 0) (3 0 2 0 nil 0) (7 0 3 0 nil 0) (4 0 3 1 nil 0) (1 0 4 0 nil 0) (9 0 4 1 nil 0) (26 1 5 0 nil 0) (6 0 5 1 nil 0) (25 0 6 0 nil 0) (21 0 7 0 nil 0) (9 0 7 1 nil 0) (26 1 9 0 nil 0) (8 0 9 1 nil 0) (11 0 10 0 nil 0) (25 0 10 1 nil 0) (19 0 11 0 nil 0) (10 0 12 0 nil 0) (24 0 13 0 nil 0) (15 0 14 0 nil 0) (13 0 14 1 nil 0) (16 0 15 0 nil 0) (14 0 17 0 nil 0) (17 0 18 1 nil 0) (18 1 19 0 nil 0) (22 0 21 0 nil 0) (23 0 22 0 nil 0) (21 0 24 0 nil 0) (12 0 26 0 nil 0) (2 0 27 0 nil 0) (26 0 28 0 nil 0))) 1 "get_harmser" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 226 64) (om-make-point 38 28) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 189 85) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 106 13) (om-make-point 202 28) (list 62 65 67 69 71 75 76 78 80 83 86) "(62 65 67 69 71 75 76 78 80 83 86)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 2" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 130 134) (om-make-point 134 107) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6900 7000 7800 8300 8400 8500 8600)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 (quote t) 1000 1 (om-make-point 1536 773) (om-make-point -8 -8) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((41 0 40 1 nil 0) (43 0 41 0 nil 0) (42 0 43 0 nil 0) (44 0 43 1 nil 0) (48 1 44 0 nil 0) (0 0 46 0 nil 0) (45 0 46 1 nil 0) (46 0 48 1 nil 0))) nil 6.15))
