; OM File Header - Saved 2022/08/15 0:31:54
; (6.15 :patc (om-make-point 118 60) (om-make-point 7 269) (om-make-point 1280 607) "" 183 0 "2019/05/08 15:54:43" "2019/05/16 8:26:03")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"concat_cseqlist.omp\"" "#P\"transpor_cseq.omp\"" "#P\"midi galaxia - frase 1 - novo .omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "modelo_ngc5128_frase" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 285 783) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "transposicao" 0 (om-make-point 336 23) "" "transposicao" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 284 298) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "concat_cseqlist" (quote ("elements" "fabiana" "concat_cseqlist")) (quote ((om-load-inputfun (quote input-funbox) "" "chord-seq-list" nil))) (om-make-point 240 456) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 291 551) (om-make-point 481 166) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3600 2400 6000 4800) (6100) (6600) (7900) (7600) (7100) (6800) (6500) (6000 4800 3600) (7000) (8100) (7600) (7100) (7000) (6600) (6000 4800) (6100) (6900) (6600) (6500) (8100) (7400) (7000) (8600) (8200) (7900) (8200) (7500) (5400) (6200) (6900) (7400) (8100) (5800 7900) (6500 7400) (6300 6900) (6100 7200) (6000 7100) (6500 7300) (6300 6800) (6100 8000) (7600) (7100) (5800 7900) (6500 7400) (6300 6900) (6100 7200) (6000 7100) (6500 7300) (6300 6800) (6100 8000) (7600) (7100) (5800 7900) (6500 7400) (6300 6900) (6100 7200) (6000 7100) (6500 7300) (6300 6800) (6100 8000) (7600) (7100) (5800 7900) (6500 7400) (6300 6900) (6100 7200) (6000 7100) (6500 7300) (6300 6800) (6100 8000) (7600) (7100) (5800 7900) (6500 7400) (6300 6900) (6100 7200) (6000 7100) (6500 7300) (6300 6800) (6100 8000) (7600) (7100) (5800 7900) (6500 7400) (6300 6900) (6100 7200) (6000 7100) (6500 7300) (6300 6800) (6100 8000) (7600) (7100) (5800 7900) (6500 7400) (6300 6900) (6100 7200) (6000 7100) (6500 7300) (6300 6800) (6100 8000) (7600) (7100))) :lonset (quote (0 250 500 750 1000 1250 1500 1750 2000 2250 2500 2750 3000 3250 3500 3750 4000 4250 4500 4750 5000 5250 5500 5750 6000 6250 6500 6750 7000 7250 7500 7750 8000 8236 8361 8486 8611 8736 8861 8986 9111 9236 9361 9479 9604 9729 9854 9979 10104 10229 10354 10479 10604 10722 10847 10972 11097 11222 11347 11472 11597 11722 11847 11965 12090 12215 12340 12465 12590 12715 12840 12965 13090 13208 13333 13458 13583 13708 13833 13958 14083 14208 14333 14451 14576 14701 14826 14951 15076 15201 15326 15451 15576 15694 15819 15944 16069 16194 16319 16444 16569 16694 16819 16937)) :ldur (quote ((236 236 236 236) (236) (236) (236) (236) (236) (236) (236) (236 236 236) (236) (236) (236) (236) (236) (236) (236 236) (236) (236) (236) (236) (236) (236) (236) (236) (236) (236) (236) (236) (236) (236) (236) (236) (236) (118 118) (118 118) (118 118) (118 118) (118 118) (118 118) (118 118) (118 118) (118) (118) (118 118) (118 118) (118 118) (118 118) (118 118) (118 118) (118 118) (118 118) (118) (118) (118 118) (118 118) (118 118) (118 118) (118 118) (118 118) (118 118) (118 118) (118) (118) (118 118) (118 118) (118 118) (118 118) (118 118) (118 118) (118 118) (118 118) (118) (118) (118 118) (118 118) (118 118) (118 118) (118 118) (118 118) (118 118) (118 118) (118) (118) (118 118) (118 118) (118 118) (118 118) (118 118) (118 118) (118 118) (118 118) (118) (118) (118 118) (118 118) (118 118) (118 118) (118 118) (118 118) (118 118) (118 118) (118) (118))) :lvel (quoteloffset (quote ((0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0))) :lchan (quote ((1 1 1 1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.15 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 401 23) (om-make-point 1463 470) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 483 86) (om-make-point 27 30) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 507 86) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 7) (om-load-inputfun (quote input-funbox) "max" "HIGH" 8))) (om-make-point 463 116) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 379 166) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "transpor_cseq" (quote ("elements" "fabiana" "transpor_cseq")) (quote ((om-load-inputfun (quote input-funbox) "" "cseq" nil) (om-load-inputfun (quote input-funbox) "" "transp" nil))) (om-make-point 111 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "midi galaxia - frase 1 - novo" (quote ("elements" "fabiana" "midi galaxia - frase 1 - novo ")) (quote nil) (om-make-point 50 45) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (9 0 2 0 nil 0) (8 0 2 1 nil 0) (2 0 3 0 nil 0) (3 0 4 0 nil 0) (5 0 7 0 nil 0) (6 0 7 1 nil 0) (10 2 8 0 nil 0) (7 0 8 1 nil 0) (10 1 9 0 nil 0) (1 0 9 1 nil 0))) nil 6.15))
