; OM File Header - Saved 2024/01/26 9:01:48
; (6.15 :patc (om-make-point 96 213) (om-make-point 3 53) (om-make-point 1536 613) "" 183 0 nil "2022/07/05 12:21:34")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"C:../../abstractions/sc-name.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "acordes_alfabeto" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 152 420) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 72 29) (quote "Pavão") "" (om-make-point 79 44) nil (om-make-color 1.0 0.0 0.07060658) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 636 603) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "sc-names" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 123 650) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "chords" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "sc-name" (quote ("elements" "abstractions" "sc-name")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 611 408) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 646 536) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 6" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 410 335) (om-make-point 70 50) (load-buffer-textfile (quote ("(62 63 73 74 87)" "(65 66 67 72 76 77 83)" "(47 48 57 63 64 65 67 68 72)" "(60 63 65 67 68 73 74 76 78 81 84)" "(73 74 76 77 79 84 88 95)" "(62 63 64 72 77 78 79 80)" "(44 49 50 55 68 73 76 78 81)" "(67 72 73 76 77 78)" "(60 63 65 66 68 73 74 76 78 81 84)" "(63 66 73 74 79 88)" "(57 59 60 68 69 77 78 80)" "(60 68 69 70 71 72 79)" "(64 69 72 77 82 86)" "(55 56 60 63 70 76 81 85 86)" "(62 63 64 72 79 89 90 92)" "(62 69 75 82)" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 21 531) (om-make-point 570 104) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200 6300 7300 7400 8700) (6500 6600 6700 7200 7600 7700 8300) (4700 4800 5700 6300 6400 6500 6700 6800 7200) (6000 6300 6500 6700 6800 7300 7400 7600 7800 8100 8400) (7300 7400 7600 7700 7900 8400 8800 9500) (6200 6300 6400 7200 7700 7800 7900 8000) (4400 4900 5000 5500 6800 7300 7600 7800 8100) (6700 7200 7300 7600 7700 7800) (6000 6300 6500 6600 6800 7300 7400 7600 7800 8100 8400) (6300 6600 7300 7400 7900 8800) (5700 5900 6000 6800 6900 7700 7800 8000) (6000 6800 6900 7000 7100 7200 7900) (6400 6900 7200 7700 8200 8600) (5500 5600 6000 6300 7000 7600 8100 8500 8600) (6200 6300 6400 7200 7900 8900 9000 9200) (6200 6900 7500 8200))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000)) :ldur (quote ((1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point -8 -8) (om-make-point 1536 781) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 141 481) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH 2" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 319 333) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 356 216) (om-make-point 50 30) (quote equal) "equal" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 333 257) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 91 293) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 178 190) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 58 30) (quote "Baleia") "" (om-make-point 479 48) nil (om-make-color 1.0 0.0 0.07060658) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 5" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 476 83) (om-make-point 70 50) (load-buffer-textfile (quote ("(44 49 50 55 68 73 76 78 81)" "(67 72 73 76 77 78)" "(60 63 65 66 68 73 74 76 78 81 84)" "(63 66 73 74 79 88)" "(57 59 60 68 69 77 78 80)" "(60 68 69 70 71 72 79)" "(64 69 72 77 82 86)" "(55 56 60 63 70 76 81 85 86)" "(62 63 64 72 79 89 90 92)" "(62 69 75 82)" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 64 30) (quote "Tucano") "" (om-make-point 384 47) nil (om-make-color 1.0 0.0 0.07060658) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 388 81) (om-make-point 70 50) (load-buffer-textfile (quote ("(62 69 75 82)" "(67 72 73 76 77 78)" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 45 30) (quote "Rio") "" (om-make-point 299 46) nil (om-make-color 1.0 0.0 0.07060658) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 284 79) (om-make-point 70 50) (load-buffer-textfile (quote ("(62 69 75 82)" "(47 48 57 63 64 65 67 68 72)" "(63 66 73 74 79 88)" "(62 69 75 82)" "(60 68 69 70 71 72 79)" "(60 63 65 67 68 73 74 76 78 81 84)" "(60 63 65 67 68 73 74 76 78 81 84)" "(73 74 76 77 79 84 88 95)" "(62 63 64 72 77 78 79 80)" "(67 72 73 76 77 78)" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 90 30) (quote "Peixe Austral") "" (om-make-point 165 44) nil (om-make-color 1.0 0.0 0.07060658) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 172 78) (om-make-point 70 50) (load-buffer-textfile (quote ("(62 69 75 82)" "" " " "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 72 77) (om-make-point 70 50) (load-buffer-textfile (quote ("(60 63 65 67 68 73 74 76 78 81 84)" "(62 63 73 74 87)" "(67 72 73 76 77 78)" "(62 69 75 82)" "(65 66 67 72 76 77 83)" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 2 0 nil 0) (7 1 3 0 nil 0) (4 0 5 0 nil 0) (6 1 5 1 nil 1) (11 0 6 1 nil 0) (8 0 7 1 nil 0) (6 1 8 0 nil 1) (0 0 8 1 nil 0) (11 0 9 0 nil 0) (13 0 11 0 nil 0) (10 0 11 1 nil 0) (13 0 12 0 nil 0) (22 1 13 0 nil 0) (21 1 13 1 nil 0) (19 1 13 2 nil 0) (17 1 13 3 nil 0) (15 1 13 4 nil 0))) nil 6.15))
