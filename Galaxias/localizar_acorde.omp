; OM File Header - Saved 2023/10/23 11:57:22
; (6.15 :patc (om-make-point 10 10) (om-make-point -8 -8) (om-make-point 1536 773) "" 183 0 "2019/06/04 15:28:13" "2019/06/04 15:52:31")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"../abstractions/chord2pc.omp\"" "#P\"../set operations/set_find.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "localizar_acorde" (quote ((let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 478 333) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 497 197) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6100 6800 7400 8100) (5900 6500 7000 7800) (5900 6000 6400 6500) (5900 6400 7000 7500) (6400 6900 7500 8000))) :lonset (quote (0 1000 2000 3000 4000 5000)) :ldur (quote ((1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000))) :lvel (quote ((100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1401 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 308 43) (om-make-point 935 193) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 490 134) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-FORM" (quote p-form) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "SET" (list 3 9 6 5 0)))) (om-make-point 335 245) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "chord2pc" (quote ("elements" "abstractions" "chord2pc")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 324 162) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 310 50) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6900 7500 8200)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 23) (om-make-point 449 315) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "set_find" (quote ("elements" "set operations" "set_find")) (quote ((om-load-inputfun (quote input-funbox) "" "note list" nil) (om-load-inputfun (quote input-funbox) "" "sc-name" nil))) (om-make-point 168 243) nil (list (list (list (list 6100 6800 7400 8100) (list 5900 6500 7000 7800) (list 5900 6000 6400 6500) (list 5900 6400 7000 7500) (list 6400 6900 7500 8000)) (list (list (list 8 7 5 4)) (list (list 8 7 5 4)) (list (list 8 7 5 4)) (list (list 8 7 5 4)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 8 7 5 4)) (list (list 8 7 5 4)) (list (list 8 7 5 4)) (list (list 8 7 5 4)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 8 7 5 4)) (list (list 8 7 5 4)) (list (list 8 7 5 4)) (list (list 8 7 5 4)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 8 7 5 4)) (list (list 8 7 5 4)) (list (list 8 7 5 4)) (list (list 8 7 5 4)) (list (list 29 30 27 26)) (list (list 29 30 27 26)) (list (list 29 30 27 26)) (list (list 29 30 27 26)) (list (list 8 7 5 4)) (list (list 8 7 5 4)) (list (list 8 7 5 4)) (list (list 8 7 5 4)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 0 2 5 3)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 15 16 19 18)) (list (list 8 7 5 4)) (list (list 8 7 5 4)) (list (list 8 7 5 4)) (list (list 8 7 5 4)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10)) (list (list 7 9 11 10))))) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 102 171) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 79 31) (om-make-point 151 99) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5900) (6000) (6500) (7800) (7500) (7000) (6700) (6400) (5900) (6900) (8000) (7500) (7000) (6900) (6500) (5900) (6000) (6800) (6500) (6400) (8000) (7300) (6900) (8500) (8100) (7800) (8100) (7400) (5300) (6100) (6800) (7300) (8000))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000 31000 32000 33000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1401 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point -47 -1000) (om-make-point 1241 420) 0 1000 nil 2/5 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (2 0 1 1 nil 0) (6 0 2 0 nil 0) (4 0 3 1 nil 0) (5 1 4 0 nil 0) (7 0 6 0 nil 0) (3 0 6 1 nil 0) (8 1 7 0 nil 0))) nil 6.1401))
