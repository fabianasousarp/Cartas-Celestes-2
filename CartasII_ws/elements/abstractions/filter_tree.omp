; OM File Header - Saved 2019/06/18 17:18:23
; (6.1401 :patc (om-make-point 10 310) (om-make-point -147 -1038) (om-make-point 697 741) "" 183 0 "2019/06/18 15:30:13" "2019/06/18 17:18:23")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "filter_tree" (quote ((let ((box (om-load-boxin "cp list" 2 (om-make-point 634 129) "" "cp list" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 517 657) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "tree" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "n atks" 1 (om-make-point 497 129) "" "n atks" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKTREE 2" (quote mktree) (quote ((om-load-inputfun (quote input-funbox) "list of integer ratios" "RHYTHM" (list 1/4 1/4 1/4 1/4)) (om-load-inputfun (quote input-funbox) "list of time signatures" "TIMESIGNS" (list 4 4)))) (om-make-point 515 582) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TREE2RATIO 2" (quote tree2ratio) (quote ((om-load-inputfun (quote input-funbox) "a rythm tree" "TREE" (list (quote ?) (list (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) 1 1)) (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) -1 1))))))) (om-make-point 502 499) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REDUCETREE" (quote reducetree) (quote ((om-load-inputfun (quote input-funbox) "a rhythm tree" "TREE" (list (quote ?) (list (list (quote |4//4|) (list 1 (list 1 (list 1 2.0 1.0 1)) 1 1)) (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) -1 -1))))))) (om-make-point 421 576) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TIETREE" (quote tietree) (quote ((om-load-inputfun (quote input-funbox) "a rhythm tree" "SELF" (list (quote ?) (list (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) 1 1)) (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) -1 1))))))) (om-make-point 432 492) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKTREE" (quote mktree) (quote ((om-load-inputfun (quote input-funbox) "list of integer ratios" "RHYTHM" (list 1/4 1/4 1/4 1/4)) (om-load-inputfun (quote input-funbox) "list of time signatures" "TIMESIGNS" (list 4 4)))) (om-make-point 213 509) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 133 451) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 488 261) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 505 313) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUBS-POSN" (quote subs-posn) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIS1" (list 0 1 2 3)) (om-load-inputfun (quote input-funbox) "a list of indices" "POSN" (list 1 3)) (om-load-inputfun (quote input-funbox) "a list or value" "VAL" (list (quote a) (quote b))))) (om-make-point 367 413) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 321 272) (om-make-point 32 30) -1 "-1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 334 317) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 353 72) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 386 50) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 373 100) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 417 326) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 422 254) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 367 170) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 102 42) (quote "filtrar 49 atks para sobrar 19") nil (om-make-point 140 335) nil (om-make-color 1.0 0.0 0.05299717) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "N-PULSES" (quote n-pulses) (quote ((om-load-inputfun (quote input-funbox) "a rhythm tree" "TREE" (list (quote ?) (list (list (list 4 4) (list 1 (list 1 (list 1 2 1 1)) 1 1)) (list (list 4 4) (list 1 (list 1 (list 1 2 1 1)) -1 1))))))) (om-make-point 129 156) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TREE2RATIO" (quote tree2ratio) (quote ((om-load-inputfun (quote input-funbox) "a rythm tree" "TREE" (list (quote ?) (list (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) 1 1)) (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) -1 1))))))) (om-make-point 51 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 168 45) (quote "filtrar uma tree segundo número total de ataques") nil (om-make-point 92 66) nil (om-make-color 1.0 0.0 0.05299717) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "tree" 0 (om-make-point 56 37) "" "tree" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (4 0 3 0 nil 0) (5 0 4 0 nil 0) (6 0 5 0 nil 0) (7 0 6 0 nil 0) (8 0 7 0 nil 0) (0 0 7 1 nil 0) (22 0 8 0 nil 0) (11 0 8 1 nil 0) (9 0 10 0 nil 0) (2 0 10 1 nil 0) (13 0 11 0 nil 0) (17 0 11 1 nil 0) (10 0 11 2 nil 0) (12 0 13 0 nil 0) (21 0 13 1 nil 0) (21 0 15 0 nil 0) (14 0 16 0 nil 0) (15 0 16 1 nil 0) (18 0 17 0 nil 0) (19 0 18 0 nil 0) (2 0 18 1 nil 0) (16 0 19 0 nil 0) (24 0 21 0 nil 0) (24 0 22 0 nil 0))) nil 6.1401))
